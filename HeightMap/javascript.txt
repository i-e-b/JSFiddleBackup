

var com = 4; //:4 components( RGBA )
var width = 512;
var height = 512;
var tot_com = width * height * com; //size of ARGB array
var single_com = width * height; // size of single plane

var heightMap = new Uint8Array(tot_com); // height map ARGB

var heights = new Uint8Array(single_com); // single plane height


var colorMap = new Uint8Array(tot_com); // colour map ARGB

var color_R = new Uint8Array(single_com); // single plane Red
var color_G = new Uint8Array(single_com); // single plane Green
var color_B = new Uint8Array(single_com); // single plane Blue

var scene = new Uint8Array(tot_com); // result of rendering


console.log("creating height map");

RenderHeightTo(heightMap, width, height);
Uint8ArrayToCanvas(heightMap, width, height, "heightCanvas");

console.log("converting height to colors");

HeightToColor(heightMap, colorMap, width, height);
Uint8ArrayToCanvas(colorMap, width, height, "colorCanvas");


let MAX_HEIGHT = 400
let MIN_HEIGHT = 10
let MAX_PITCH = -200
let MIN_PITCH = 150

let VIEW_DISTANCE = 600 // how far to draw. More is slower but you can see further (range: 400 to 2000)

let PIXEL_SCALE = 1 // Resolution reduction. Higher number is faster, lower is better quality
let PIXEL_WIDTH = width / PIXEL_SCALE
let PIXEL_HEIGHT = height / PIXEL_SCALE

var doInterlacing = true; // render alternate columns per frame for motion blur
let doJitter = true; // scatter color sample points
let doFog = true; // fade to background near draw limit
let doSmoothing = true; // fade between texels on contiguous slopes
let interpolateHeightMap = true; // sample multiple height map points for a smoother render
let sharperPeaks = true; // change scaling to make hills into mountains
let interlace = 1;
let aspect = 512; // camera aspect. Smaller = fisheye
let heightScale = 1.1; // scale of slopes. Higher = taller mountains.

let mapWidth=512, mapHeight=512;
let skyWidth=512, skyHeight=512;

var camera = { // init player camera
	x : 256,
	y : 256,
	height : 400,
	angle : 3.14, // yaw angle
	v : 0 // pitch. Positive = looking down
}

console.log("rendering scene");

RenderScene(heightMap, colorMap, scene, width, height);
Uint8ArrayToCanvas(scene, width, height, "renderCanvas");

function loop(){
  setTimeout(()=>{
    camera.angle+=0.0125;
    camera.y = (camera.y + 1) % 1024;
    camera.x = (camera.x + 0.5) % 1024;
    
    if (camera.angle > 360) camera.angle -= 360;
    
    RenderScene(heightMap, colorMap, scene, width, height);
    Uint8ArrayToCanvas(scene, width, height, "renderCanvas");
    loop();
  }, 15);
}
loop();


// modify this to change the image
function heightFunction(u8a, x, y, ci) {
  // three octaves of noise:
  
  var z = 5; // slice through the noise space. This is your 'seed'
  var lowfreq = 0.01;
  var midfreq = 0.05;
  var highfreq = 0.5;
  
  var a = noise(x*lowfreq,y*lowfreq, z);
  var b = noise(x*midfreq,y*midfreq, z);
  var c = noise(x*highfreq,y*highfreq, z);
 
  var v = 1.2 * // overdrive a little
  (a * 0.6) + // main mountain ranges
  (a * b * 0.4) + // more ridges at higher elevations
  (a * a *c * 0.1) - // crinkles only at the top
  0.1; // adjust water line
  
  if (v < 0.2) v = 0.199; // water line
  
  var sample = Math.min(255, Math.max(0, v * 255));
  
  set(u8a, ci, sample,sample,sample);
  return sample;
}


function HeightToColor(heightMap, colorMap, w, h) {
  let rowWidth = w * com; // number of bytes in an image row

	let falloff = 0.004; // how steep the shadows are. lower = sun is closer to horizon.
  let fade = 0.05; // how sharp the peaks of shadows are. Lower = smoother
  let maxDark = 0.65; // how dark shadows can get

	// main color + shadow
  for (let y = 0; y < h; y++) {
    let yoff = y * rowWidth;
    let shadow = 0; // what height is in shadow
    let shadowDarkness = 1.0; // how dark is the shadow (1.0 = light, 0.0=black)
    
    for (let x = 0, xoff = 0; x < w; x++, xoff += com) {
    	var idx = yoff + xoff;
      
      var s = heightMap[idx] / 255;
      shadow = Math.max(s,shadow) - falloff;
      
      // really simple green->white
      var r = s*s*s*800 - 50;
      var g = Math.max(r, 50 + ((s*s) * 127));
      var b = s*s*s*800 - 50;
      
      if (s < 0.2) { // water
      	r = 20;
        g = 80;
        b = 120;
      } else if (s < 0.3) { // mud
      	var ms = 1.0-(s*2);
        var gs = s*2;
      	r = 140 * ms + r * gs;
        g = 120 * ms + g * gs;
        b = 110 * ms + b * gs;
      }
      
      // pin to range
      r = Math.max(0, Math.min(255, r));
      g = Math.max(0, Math.min(255, g));
      b = Math.max(0, Math.min(255, b));
      
      // darker if in shadow
      if (shadow > s){
      	shadowDarkness -= fade; // fade shadow in. Makes hill peaks looks less weird
        if (shadowDarkness < maxDark) shadowDarkness = maxDark;
        
      	r = Math.max(0, r * shadowDarkness);
        g = Math.max(0, g * shadowDarkness);
        b = Math.max(0, b * shadowDarkness);
      } else {
      	shadowDarkness = 1.0; // reset for next shadow
      }
      
      set(colorMap, idx, r, g, b)
    }
  }
  
  // simple kernel blur
  for (let y = 1; y < h - 1; y++){
    let yoff_1 = (y-1) * rowWidth;
    let yoff_2 = (y  ) * rowWidth;
    let yoff_3 = (y+1) * rowWidth;
  	
    for (let x = 1, xoff = 0; x < w-1; x++, xoff += com) {
      let c_tl = get(colorMap, yoff_1 + xoff - com);
      let c_ml = get(colorMap, yoff_2 + xoff - com);
      let c_bl = get(colorMap, yoff_3 + xoff - com);
      
      
      let c_tc = get(colorMap, yoff_1 + xoff);
      let c_mc = get(colorMap, yoff_2 + xoff);
      let c_bc = get(colorMap, yoff_3 + xoff);
      
      let c_tr = get(colorMap, yoff_1 + xoff + com);
      let c_mr = get(colorMap, yoff_2 + xoff + com);
      let c_br = get(colorMap, yoff_3 + xoff + com);
      
      var r = c_tl.r * 0.5 + c_tc.r * 0.75 + c_tr.r * 0.5 +
               c_ml.r * 0.75 + c_mc.r * 1.0 + c_mr.r * 0.75 +
               c_bl.r * 0.5 + c_bc.r * 0.75 + c_br.r * 0.5;
               
      var g = c_tl.g * 0.5 + c_tc.g * 0.75 + c_tr.g * 0.5 +
               c_ml.g * 0.75 + c_mc.g * 1.0 + c_mr.g * 0.75 +
               c_bl.g * 0.5 + c_bc.g * 0.75 + c_br.g * 0.5;
               
      var b = c_tl.b * 0.5 + c_tc.b * 0.75 + c_tr.b * 0.5 +
               c_ml.b * 0.75 + c_mc.b * 1.0 + c_mr.b * 0.75 +
               c_bl.b * 0.5 + c_bc.b * 0.75 + c_br.b * 0.5;
               
               
      set(colorMap, yoff_2 + xoff, r/6, g/6, b/6);
    }
  }
  
  // copy component image to planar (planar is better for the render)
  for (let y = 0; y < h; y++) {
  	let plane_y = y * w;
    let yoff = y * rowWidth;
    
    for (let x = 0, xoff = 0; x < w; x++, xoff += com) {
    	var idx = yoff + xoff;
      var planeIdx = x + plane_y;
      var color = get(colorMap, idx)
      color_R[planeIdx] = color.r;
      color_G[planeIdx] = color.g;
      color_B[planeIdx] = color.b;
    }
  }
}

function Uint8ArrayToCanvas(
  u8a, //:uint8Array
  wid, //:width__of_u8a_data_in_pixels
  hig, //:height_of_u8a_data_in_pixels
  nam, //:name_id_of_canvas_on_dom
) {

  // Get canvas element & context
  var can = document.getElementById(nam);
  var ctx = can.getContext("2d");

  // Use U8A to create image data object:    
  var UAC = new Uint8ClampedArray(u8a, wid, hig);
  var DAT = new ImageData(UAC, wid, hig);

  // Write data into canvas:
  ctx.putImageData(DAT, 0, 0);
}

function setPixel(u8a, x, y, r, g, b) {
	var idx = ((y*width) + x) * com;
  u8a[idx + 0] = r; //:Red
  u8a[idx + 1] = g; //:Green
  u8a[idx + 2] = b; //:Blue
  u8a[idx + 3] = 255; //:Alpha
}

function set(u8a, idx, r, g, b) {
  u8a[idx + 0] = r; //:Red
  u8a[idx + 1] = g; //:Green
  u8a[idx + 2] = b; //:Blue
  u8a[idx + 3] = 255; //:Alpha
}

function get(u8a, idx, r, g, b) {
	var color = {r:0,g:0,b:0};
  color.r=u8a[idx + 0];
  color.g=u8a[idx + 1];
  color.b=u8a[idx + 2];
  return color;
}

function RenderHeightTo(u8a, w, h) {
  let rowWidth = w * com; // number of bytes in an image row


  //:Make a pattern on array:
  var d = 0; //:d_is_for_distance
  var ci = 0; //:Component_Index

  for (let y = 0; y < h; y++) {
  	let plane_y = y*w;
    let yoff = y * rowWidth;
    for (let x = 0, xoff = 0; x < w; x++, xoff += com) {
      ci = yoff + xoff;
      var s = heightFunction(u8a, x, y, ci);
      
      heights[plane_y+x] = s;
    }
  }
}
// This is a port of Ken Perlin's Java code. The
// original Java code is at http://cs.nyu.edu/%7Eperlin/noise/.
// Note that in this version, a number from 0 to 1 is returned.
function noise(x, y, z) {

  var p = new Array(512)
  var permutation = [151, 160, 137, 91, 90, 15,
    131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,
    190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
    88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
    77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,
    102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
    135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,
    5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
    223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
    129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,
    251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
    49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
  ];
  for (var i = 0; i < 256; i++)
    p[256 + i] = p[i] = permutation[i];

  var X = Math.floor(x) & 255, // FIND UNIT CUBE THAT
    Y = Math.floor(y) & 255, // CONTAINS POINT.
    Z = Math.floor(z) & 255;
  x -= Math.floor(x); // FIND RELATIVE X,Y,Z
  y -= Math.floor(y); // OF POINT IN CUBE.
  z -= Math.floor(z);
  var u = fade(x), // COMPUTE FADE CURVES
    v = fade(y), // FOR EACH OF X,Y,Z.
    w = fade(z);
  var A = p[X] + Y,
    AA = p[A] + Z,
    AB = p[A + 1] + Z, // HASH COORDINATES OF
    B = p[X + 1] + Y,
    BA = p[B] + Z,
    BB = p[B + 1] + Z; // THE 8 CUBE CORNERS,

  return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z), // AND ADD
        grad(p[BA], x - 1, y, z)), // BLENDED
      lerp(u, grad(p[AB], x, y - 1, z), // RESULTS
        grad(p[BB], x - 1, y - 1, z))), // FROM  8
    lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1), // CORNERS
        grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE
      lerp(u, grad(p[AB + 1], x, y - 1, z - 1),
        grad(p[BB + 1], x - 1, y - 1, z - 1)))));
}

function fade(t) {
  return t * t * t * (t * (t * 6 - 15) + 10);
}

function lerp(t, a, b) {
  return a + t * (b - a);
}

function grad(hash, x, y, z) {
  var h = hash & 15; // CONVERT LO 4 BITS OF HASH CODE
  var u = h < 8 ? x : y, // INTO 12 GRADIENT DIRECTIONS.
    v = h < 4 ? y : h == 12 || h == 14 ? x : z;
  return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

function scale(n) {
  return (1 + n) / 2;
}


// Converted from Lua at https://github.com/i-e-b/voxel-terrain/blob/master/main.lua




function RenderScene(heightMap, colorMap, outp, w, h) {
	// draw terrain
	var sinAngle = Math.sin(camera.angle);
	var cosAngle = Math.cos(camera.angle);

	var y3d = -aspect * 1.5;
  interlace = interlace || 0;
  var di = doInterlacing ? 2 : 1;
  
	for (var i = interlace; i < width; i+= di){ //increment by 2 for interlacing
		var x3d = (i - width / 2) * 2.25;

		var rotX =  cosAngle * x3d + sinAngle * y3d;
		var rotY = -sinAngle * x3d + cosAngle * y3d;

		rayCast(i, camera.x, camera.y,
    	camera.x + rotX, camera.y + rotY,
      y3d / Math.sqrt(x3d * x3d + y3d * y3d),
    	camera.angle);
	}

	// alternate scanlines each frame
	interlace = 1 - interlace;
}

function wrapToBounds(v, limit){

	// mirroring at edges so we don't need to have a nice wrapping texture
  if (v < 0) v = -v;
  v = v % (limit * 2);
  if (v >= limit) v = limit - (v - limit);
	return v;
}

// line = vertical span index (x in render space)
// x1,y1 = camera location (in map space)
// x2,y2 = camera look
// d = height of camera
// xDir = camera direction
function rayCast(line, x1, y1, x2, y2, d, xDir) {
	// x1, y1, x2, y2 are the start and end points on map for ray
	var dx = x2 - x1
	var dy = y2 - y1

	var dp = Math.abs(d) / 100
	var persp = 0

	// calculate stepsize in x and y direction
	var dr = Math.sqrt(dx * dx + dy * dy) // distance between start and end point
	dx = dx / dr
	dy = dy / dr

	var ymin = height // last place we ended drawing a vertical line
										 // also the highest thing we've drawn to prevent over-paint (0 is max height)
	var z3 = ymin+1     // projected Z height of point under consideration
	var data, h=0;
	var pr=0,pg=0,pb=0;
	var gap = 1 // marks when we should break slope colour interpolation
	var hbound = height - 1

	// sky texture x coord
	var sx = Math.floor( (-xDir*PIXEL_SCALE*(PIXEL_WIDTH / Math.pi) + line) % skyWidth)*skyWidth

	// fog parameters
	var dlimit = VIEW_DISTANCE * 0.7
	var dfog = 1 / (VIEW_DISTANCE * 0.3)
	var fo=0,fs = 1;
	var lastI = 0

	var x,y,idx

	// local references to speed up the core loop: (this is surprisingly effective in Lua)
	var camHeight = camera.height
	var camV = camera.v
  

	// MAIN LOOP
	// we draw from near to far
  // first we do a tight loop through the height map looking for a position
	// that would be visible behind anything else we've drawn
	// then we loop through the pixels to draw and color them
	for (var i = 0; i < VIEW_DISTANCE; i++) {
  
		// step to next position, wrapped for out-of-bounds
		x1 = x1+dx;
		y1 = y1+dy;
    
		x = 0|wrapToBounds(x1, mapWidth);
		y = 0|wrapToBounds(y1, mapHeight);
    idx = (y * width) + x;

		// get height
    let terrainHeight = 0;
    if (interpolateHeightMap) {
    
    	let fx = x1 - Math.trunc(x1);
    	let fy = y1 - Math.trunc(y1);
      
      if (dx < 0) fx = 1 - fx;
      if (dy < 0) fy = 1 - fy;
      
      let dfx = 1 - fx;
      let dfy = 1 - fy;
      
			let ix = 0|wrapToBounds(x1+dx, mapWidth);
			let iy = 0|wrapToBounds(y1+dy, mapHeight);
    	
      let s1 = heights[0|(( y * width) +  x)];
    	let s2 = heights[0|(( y * width) + ix)];
    	let s3 = heights[0|((iy * width) +  x)];
    	let s4 = heights[0|((iy * width) + ix)];
      
      terrainHeight = (s1 * dfx * dfy) + (s2 * fx * dfy) +
      								(s3 * dfx *  fy) + (s4 * fx * fy);
                      
    	terrainHeight *= heightScale;
    } else {
    	terrainHeight = heights[0|idx] * heightScale;
    }
    if (sharperPeaks) {
      terrainHeight *= terrainHeight / 127;
    }
		h = camHeight - terrainHeight;  // lack of interpolation here causes banding artifacts close up

		// perspective calculation where d is the correction parameter
		persp = persp + dp;
    z3 = (h / persp) - camV;

		// is this position is visible?
		if (z3 < ymin) { // (if you wanted to mark visible/invisible positions you could do it here)
			z3 = Math.floor(z3) // get on to pixel bounds

			// bounds of vertical strip, limited to buffer bounds
			var ir = Math.min(hbound, Math.max(0,z3))
			var iz = Math.min(hbound, ymin)

			// read color from image
			var r = color_R[idx], g = color_G[idx], b =color_B[idx];

			// fog effect
			if ((doFog) && (i > dlimit) ){ // near the fog limit
				fo = dfog*(i-dlimit) // calculate the fog blend by distance
				fs = 1 - fo
				idx = (sx) + (ir % skyHeight)
				r = (r * fs) + (fo * 127);//sky_R[idx]) //127,127,255
				g = (g * fs) + (fo * 127);//sky_G[idx])
				b = (b * fs) + (fo * 255);//sky_B[idx])
			}

			if (ir+1 < iz) { // large textels, interpolate for smoothness
				// get the next color, interpolate between that and the previous

				// Jitter samples to make smoothing look better (otherwise orthagonal directions look stripey)
				if ((doJitter) && (i < dlimit)) { // don't jitter if drawing fog
					// pull nearby sample to blend
					let jx = 0|wrapToBounds(x1+(dy/2), mapWidth);
					let jy = 0|wrapToBounds(y1+(dx/2), mapHeight);
					var jidx = (jy*mapWidth)+jx;
					r = (r + color_R[jidx]) / 2
					g = (g + color_G[jidx]) / 2
				  b = (b + color_B[jidx]) / 2
				}

				if (doSmoothing) {
					if (gap > 0) { pr=r;pg=g;pb=b; } // no prev colors
					var pc = (iz - ir) + 1
					var sr = (r - pr)/pc
					var sg = (g - pg)/pc
					var sb = (b - pb)/pc
					for (var k = iz; k >= ir; k--) {
            setPixel(scene, line, 0|k, pr,pg,pb);
						pr = pr + sr
						pg = pg + sg
						pb = pb + sb
					}
				} else {// no smoothing, just fill in with sample color
					for (var k = iz; k >= ir; k--) {
            setPixel(scene, line, 0|k, r,g,b);
					}
				}

			} else { // small textels. Could supersample for quality?
				pr=r;pg=g;pb=b; // copy previous colors
        setPixel(scene, line, 0|ir, r,g,b);
			}
			gap = 0
		} else { // obscured
			gap = 1
		}
		ymin = Math.min(ymin, z3);
		if (ymin < 1) { break; } // early exit: the screen is full
	} // end of draw distance

	// now if we didn't get to the top of the screen, fill in with sky
	for (var i = ymin; i >= 0; i--) {
		idx = (sx) + (i % skyHeight)
		//imageData:setPixel(line, i % height, sky_R[idx],sky_G[idx],sky_B[idx])
    // todo: synth a sky texture too
    setPixel(scene, line, i % height, 127,127,255);
	}
 }