'strict';

/* Settings */
const extraCodes = 5; // increase for longer, but more resilient codes
document.getElementById('infoCD').innerText = "" + extraCodes;

/* UI */
function clearLog() {document.getElementById('outp').innerText = "";}
function log(msg) {document.getElementById('outp').innerText += msg + "\r\n";}
function setCode(c) {document.getElementById('displayedCode').innerText = c.join('');}
function setTagId(c) {document.getElementById('hexTagId').value = "" + c;}
function getTagId() {return document.getElementById('hexTagId').value;}
function setResult(msg) {document.getElementById('resultCode').innerText = msg;}
function getInput() {return document.getElementById('userInput').value.split('');}
function copyCodeToInput() {document.getElementById('userInput').value = document.getElementById('displayedCode').innerText;}

/* GF 16 --> */
let gf_table = null;

function gfTable() {
  if (gf_table) return gf_table;
  gf_table = {
    exp: Array(32).fill(0),
    log: Array(16).fill(0)
  };
  let x = 1;
  let prim = 19; // critical to get this right!

  for (let i = 0; i < 16; i++) {
    gf_table.exp[i] = x & 0x0f;
    gf_table.log[x] = i & 0x0f;
    x <<= 1;
    if (x & 0x110) x ^= prim;
    x &= 0x0f;
  }
  for (let i = 15; i < 32; i++) {
    gf_table.exp[i] = gf_table.exp[i - 15] & 0x0f;
  }
  return gf_table;
}

function gfAddSub(a, b) {
  return (a ^ b) & 0x0f;
} // add and subtract are same in GF256
function gfMul(a, b) {
  if (a === 0 || b === 0) return 0;
  let gf = gfTable();
  return gf.exp[gf.log[a] + gf.log[b]];
}

function gfDiv(a, b) {
  if (a === 0 || b === 0) return 0;
  let gf = gfTable();
  return gf.exp[((gf.log[a] + 15) - gf.log[b]) % 15];
}

function gfPow(n, p) {
  let gf = gfTable();
  return gf.exp[(gf.log[n] * p) % 15];
}

function gfInverse(n) {
  let gf = gfTable();
  return gf.exp[15 - gf.log[n]];
}

function gfPolyMulScalar(p, sc) { // coeff array, scalar
  let res = Array(p.length).fill(0);
  for (let i = 0; i < p.length; i++) {
    res[i] = gfMul(p[i], sc);
  }
  return res;
}

function gfAddPoly(p, q) { // add two polynomials
  let len = p.length >= q.length ? p.length : q.length;
  let res = Array(len).fill(0);
  for (let i = 0; i < p.length; i++) {
    res[i + len - p.length] = p[i];
  }
  for (let i = 0; i < q.length; i++) {
    res[i + len - q.length] ^= q[i];
  }
  return res;
}

function gfMulPoly(p, q) { // multiply two polynomials
  let res = Array(p.length + q.length - 1).fill(0);
  for (let j = 0; j < q.length; j++) {
    for (let i = 0; i < p.length; i++) {
      res[i + j] = gfAddSub(res[i + j], gfMul(p[i], q[j]));
    }
  }
  return res;
}

function gfEvalPoly(p, x) { // evaluate polynomial 'p' for value 'x', resulting in scalar
  let y = p[0];
  for (let i = 1; i < p.length; i++) {
    y = gfMul(y, x) ^ p[i];
  }
  return y & 0x0f;
}

function gfIrreduciblePoly(symCount) {
  let gen = [1];
  for (let i = 0; i < symCount; i++) {
    gen = gfMulPoly(gen, [1, gfPow(2, i)]);
  }
  return gen;
}
/* <-- GF 16 */

/* Error correction --> */
function removeLeadingZeros(arr) {
  let outp = [];
  let latch = false;
  for (let i = 0; i < arr.length; i++) {
    if (!latch && arr[i] === 0) continue;
    latch = true;
    outp.push(arr[i]);
  }
  return outp;
}

function allZeros(arr) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] !== 0) return false;
  }
  return true;
}

function rsCalcSyndromes(msg, sym) {
  let synd = Array(sym + 1).fill(0); // with leading zero
  for (let i = 0; i < sym; i++) {
    synd[i + 1] = gfEvalPoly(msg, gfPow(2, i));
  }
  return synd;
}

function rsErrorLocatorPoly(synd, sym, erases) {
  let errLoc = [1];
  let oldLoc = [1];

  let syndShift = 0;
  if (synd.length > sym) syndShift = synd.length - sym;

  for (let i = 0; i < (sym - erases); i++) {
    let kappa = i + syndShift;
    let delta = synd[kappa];
    for (let j = 1; j < errLoc.length; j++) {
      delta ^= gfMul(errLoc[errLoc.length - (j + 1)], synd[kappa - j]);
    }
    oldLoc.push(0);
    if (delta !== 0) {
      if (oldLoc.length > errLoc.length) {
        let newLoc = gfPolyMulScalar(oldLoc, delta);
        oldLoc = gfPolyMulScalar(errLoc, gfInverse(delta));
        errLoc = newLoc;
      }
      let scale = gfPolyMulScalar(oldLoc, delta);
      errLoc = gfAddPoly(errLoc, scale);
    }
  }

  errLoc = removeLeadingZeros(errLoc);
  let errCount = errLoc.length - 1;
  if (errCount - erases > sym) return 'too many errors';

  return errLoc;
}

function rsFindErrors(locPoly, len) {
  let errs = locPoly.length - 1;
  let pos = [];

  for (let i = 0; i < len; i++) {
    let test = gfEvalPoly(locPoly, gfPow(2, i)) & 0x0f;
    if (test === 0) {
      pos.push(len - 1 - i);
    }
  }
  if (pos.length !== errs) return 'too many errors';

  return pos;
}

function rsDataErrorLocatorPoly(pos) {
  let eLoc = [1];
  for (let i = 0; i < pos.length; i++) {
    let add = gfAddPoly([1], [gfPow(2, pos[i]), 0]);
    eLoc = gfMulPoly(eLoc, add);
  }
  return eLoc;
}

function rsErrorEvaluator(synd, errLoc, n) {
  let poly = gfMulPoly(synd, errLoc);
  let len = poly.length - (n + 1);
  for (let i = 0; i < len; i++) {
    poly[i] = poly[i + len];
  }
  poly.length = poly.length - len;
  return poly;
}

function rsCorrectErrors(msg, synd, pos) { // Forney algorithm
  let len = msg.length;
  let coeffPos = [];
  let rSynd = synd.reverse();
  for (let i = 0; i < pos.length; i++) {
    coeffPos.push(len - 1 - pos[i]);
  }

  let errLoc = rsDataErrorLocatorPoly(coeffPos);
  let errEval = rsErrorEvaluator(rSynd, errLoc, errLoc.length - 1);

  let chi = [];
  for (let i = 0; i < coeffPos.length; i++) {
    chi.push(gfPow(2, coeffPos[i]));
  }

  let E = Array(len).fill(0);
  for (let i = 0; i < chi.length; i++) {
    let tmp = [];
    let ichi = gfInverse(chi[i]);
    for (let j = 0; j < chi.length; j++) {
      if (i === j) continue;
      tmp.push(gfAddSub(1, gfMul(ichi, chi[j])));
    }

    let prime = 1;
    for (let k = 0; k < tmp.length; k++) {
      prime = gfMul(prime, tmp[k]);
    }

    let y = gfEvalPoly(errEval, ichi);
    y = gfMul(gfPow(chi[i], 1), y); // pow?
    E[pos[i]] = gfDiv(y, prime);
  }

  msg = gfAddPoly(msg, E);
  return msg;
}
/* <-- Error correction */

/* Data encode/decode --> */
// letters are the first letters on digits of a traditional cell phone number pad.
// note: '*' is for error
const keypadCode = ['A', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'D', 'G', 'J', 'M', 'P', 'T', '*'];
// characters likely to be entered as spaces
const spaces = [' ', '-', '.', 'Â·', '_', '+', '*'];

function symbolsToNum(bytes) {
  let src = [...bytes];
  let accum = 0;

  console.log("sym to num");
  // eight sets of 3 bits
  for (let i = 0; i < 8; i++) {
    let x = (0 | src.shift()) - 1;
    accum = (accum * 8) + x;
  }

  // two sets of 4 bits
  for (let i = 0; i < 2; i++) {
    let t = (0 | src.shift());
    accum = (accum * 16) + t; // work around JS weirdness
  }

  return accum;
}

function numToSymbols(num) {
  let x = num;
  let out = [];

  console.log(`num to sym <- ${num.toString(2)}`);
  // two sets of 4 bit symbols
  for (let i = 0; i < 2; i++) {
    out.unshift(x & 0b1111);
    x = Math.floor(x / 16); // work around JS weirdness
  }

  // eight sets of 3 bit symbols
  for (let i = 0; i < 8; i++) {
    out.unshift((x & 0b111) + 1);
    x = Math.floor(x / 8);
  }

  if (x !== 0) log(`Error in numToSymbols: ${x} remaining`);

  return out;
}

function nyb(v) {
  return keypadCode[v];
}

// convert a list of symbol code points to a list of user-facing display characters
function display(list) {
  let code = list.map(nyb).join('');
  let outp = [];
  for (let i = 0; i < code.length; i++) {
    if (i > 0) {
      if (i % 6 === 0) outp.push("-");
      else if (i % 3 === 0) outp.push(" ");
    }
    outp.push(code[i]);
  }
  return outp;
}

// Convert user input to symbol code point list.
function decodeDisplay(input) {
  let outp = [];

  for (let i = 0; i < input.length; i++) {
    let c = keypadCode.indexOf(input[i].toUpperCase());
    if (c < 0) {
      if (spaces.indexOf(input[i]) < 0) outp.push(0); // wrong char? Insert dummy.
      continue;
    }
    outp.push(c);
  }
  return outp;
}
/* <-- Data encode/decode */

// Main encode function
// msg should be array of ints in 0..15; sym is number of additional symbols
function encode(msg, sym) {
  let gen = gfIrreduciblePoly(sym);
  let mix = Array(msg.length + gen.length - 1).fill(0);
  for (let i = 0; i < msg.length; i++) {
    mix[i] = msg[i];
  }

  for (let i = 0; i < msg.length; i++) {
    let coeff = mix[i];
    if (coeff === 0) continue;
    for (let j = 1; j < gen.length; j++) {
      mix[i + j] ^= gfMul(gen[j], coeff);
    }
  }

  let outp = [];
  for (let i = 0; i < msg.length + gen.length - 1; i++) outp.push(mix[i]);

  for (let i = 0; i < msg.length; i++) {
    outp[i] = msg[i];
  }

  return outp;
}

// Main decode and correct function
// msg should be the input code; sym is expected number of additional symbols;
// expectedLength is the expected length of msg -- and should be >= msg.length;
function decode(msg, sym, expectedLength) {
  let result = {
    ok: false,
    errs: false,
    result: msg,
    info: ""
  };
  let erases = expectedLength - msg.length;
  let synd = rsCalcSyndromes(msg, sym);
  if (allZeros(synd)) {
    log("no errors found");
    result.ok = true;
    return result;
  }

  let errPoly = rsErrorLocatorPoly(synd, sym, erases);
  if (typeof(errPoly) == "string") {
    result.errs = true;
    result.info = "too many errors (A)";
    return result;
  }

  errPoly.reverse();
  let errorPositions = rsFindErrors(errPoly, msg.length);
  if (typeof(errorPositions) == "string") {
    result.errs = true;
    result.info = "too many errors (B)";
    return result;
  }

  errorPositions.reverse();
  result.result = rsCorrectErrors(msg, synd, errorPositions);

  // recheck result
  let synd2 = rsCalcSyndromes(result.result, sym);
  if (allZeros(synd2)) {
    log("all errors corrected");
    result.ok = true;
    result.errs = true;
    result.info = "all errors corrected";
    return result;
  }

  result.ok = false;
  result.errs = true;
  result.info = "too many errors (C)";
  return result;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

// Note:
//  Using fully numeric decimal codes can quickly cause failure
//  due to carry propagation, which causes damage to all bytes.
//  So we split on 4 bit boundaries, and have user side symbols
//  that are independent based on position.

log("Reed solomon coding for Nybbles");
log("Symbols on the range [0..15]\r\n");
let sourceUniqueId = 0;
let sourceDisplayCode = "";
let orig = [];

// 32 bits of data
const maxTagId = 0xEFFFFFFF; // number of unique IDs possible
const startTagId = 0x10000000; // an offset to prevent very small IDs
// Note: the offset is not used for encoding.
function newRandomTagId() {
  sourceUniqueId = Math.floor((Math.random() * maxTagId) + startTagId);
  let tagIdStr = sourceUniqueId.toString(16).toUpperCase();
  log(`Unique ID = ${sourceUniqueId} (0x${tagIdStr})`);
  let sourceId = sourceUniqueId;
  log(`Source ID = ${sourceId}  -> ${sourceId.toString(2)}`);
  setTagId(tagIdStr);
}

function createCode() {
  clearLog();

  sourceUniqueId = parseInt(getTagId(), 16);
  log(`Unique ID = ${sourceUniqueId} (0x${sourceUniqueId.toString(16).toUpperCase()})`);
  orig = numToSymbols(sourceUniqueId); // 1..9

  log("");
  log("message symbols = " + orig.join(','));

  // encode the original
  let encoded = encode(orig, extraCodes); // 0..15

  log("");

  let displayedCode = display(encoded); // special
  setCode(displayedCode);
  sourceDisplayCode = displayedCode.join('');
}

function checkCode() {
  let userInput = getInput();
  let cleanInput = decodeDisplay(userInput); // 0..15

  if (cleanInput.length < (10 + extraCodes)) {
    setResult("Input too short");
    return;
  } else if (cleanInput.length > (10 + extraCodes)) {
    log("input symbols    = " + cleanInput.join(','));
    setResult("Input too long");
    return;
  }

  log("input symbols    = " + cleanInput.join(''));
  log("original symbols = " + orig.join(''));

  //{ok:false, errs:false, result:msg, info:""};
  let decoded = decode(cleanInput, extraCodes, cleanInput.length);
  if (decoded.ok) {
    let correctCode = display(decoded.result).join('');
    log("\r\nexpected = " + sourceDisplayCode);
    log("decoded  = " + display(decoded.result).join(''));

    for (let i = 0; i < extraCodes; i++) decoded.result.pop(); // remove recovery data
    log("trimmed = " + decoded.result.join(','));
    let recoveredId = symbolsToNum(decoded.result);
    log("Recovered code = " + recoveredId);
    let recoveredUniqueId = recoveredId;
    log(`Recovered unique ID = ${recoveredUniqueId} -> ${recoveredUniqueId.toString(16)}`);
    log(`Original unique ID  = ${sourceUniqueId} -> ${sourceUniqueId.toString(16)}`);

    if (decoded.errs) {
      if (recoveredUniqueId === sourceUniqueId) {
        setResult("Accepted as " + correctCode);
      } else {
        setResult("Error correction found " + correctCode + ", which is not the original");
      }
    } else {
      if (recoveredUniqueId === sourceUniqueId) {
        setResult("Input correct");
      } else {
        setResult("Decode error after correction");
      }
    }
  } else {
    log(JSON.stringify(decoded));
    setResult("Failure: " + decoded.info);
  }
}

document.getElementById('reRoll').onclick = function() {
  newRandomTagId();
  createCode();
  copyCodeToInput();
  checkCode();
}
document.getElementById('checkBtn').onclick = function() {
  checkCode();
}
document.getElementById('resetBtn').onclick = function() {
  copyCodeToInput();
  checkCode();
}
document.getElementById('userInput').onkeyup = function() {
  checkCode();
}
document.getElementById('hexTagId').onkeyup = function() {
  createCode();
  copyCodeToInput();
  checkCode();
}


// Initial set-up
newRandomTagId();
createCode();
copyCodeToInput();
checkCode();
